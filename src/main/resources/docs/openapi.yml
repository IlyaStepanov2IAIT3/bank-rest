openapi: 3.1.0
info:
  title: Bank REST API
  description: Документация для тестового задания Bank REST
  version: '1.0'
servers:
  - url: http://localhost:8080
    description: Generated server url
paths:
  "/api/cards":
    get:
      tags:
        - card-controller
      operationId: getUserCards
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: numberFilter
          in: query
          required: false
          schema:
            type: string
            default: ''
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PageCardDto"
    post:
      tags:
        - card-controller
      operationId: createCard
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/CreateCardRequest"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/CardDto"
  "/api/cards/transfer":
    post:
      tags:
        - card-controller
      operationId: transferBetweenCards
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/TransferRequest"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
  "/api/auth/login":
    post:
      tags:
        - auth-controller
      operationId: authenticateUser
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AuthRequest"
        required: true
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: object
  "/api/cards/{id}/block":
    patch:
      tags:
        - card-controller
      operationId: blockCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
  "/api/cards/{id}/block-request":
    patch:
      tags:
        - card-controller
      operationId: requestCardBlock
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
  "/api/cards/{id}/activate":
    patch:
      tags:
        - card-controller
      operationId: activateCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
  "/api/users":
    get:
      tags:
        - user-controller
      operationId: getAllUsers
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/UserDto"
  "/api/users/{id}":
    get:
      tags:
        - user-controller
      operationId: getUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/UserDto"
    delete:
      tags:
        - user-controller
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
  "/api/cards/all":
    get:
      tags:
        - card-controller
      operationId: getAllCards
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                "$ref": "#/components/schemas/PageCardDto"
  "/api/cards/{id}":
    delete:
      tags:
        - card-controller
      operationId: deleteCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            "*/*":
              schema:
                type: string
components:
  schemas:
    CreateCardRequest:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        startBalance:
          type: number
    CardDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        number:
          type: string
        expirationDate:
          type: string
          format: date-time
        status:
          type: string
          enum:
            - ACTIVE
            - BLOCKED
            - BLOCK_REQUESTED
            - EXPIRED
        balance:
          type: number
        createdAt:
          type: string
          format: date-time
        ownerUsername:
          type: string
    TransferRequest:
      type: object
      properties:
        fromCardId:
          type: integer
          format: int64
        toCardId:
          type: integer
          format: int64
        amount:
          type: number
    AuthRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    UserDto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        fullName:
          type: string
        email:
          type: string
    PageCardDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            "$ref": "#/components/schemas/CardDto"
        number:
          type: integer
          format: int32
        sort:
          "$ref": "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        pageable:
          "$ref": "#/components/schemas/PageableObject"
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          "$ref": "#/components/schemas/SortObject"
        paged:
          type: boolean
        pageSize:
          type: integer
          format: int32
        pageNumber:
          type: integer
          format: int32
        unpaged:
          type: boolean
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
